// Generated by CoffeeScript 1.9.3
(function() {
  var HelperProcess, fs, gitParser, log, path, util,
    slice = [].slice;

  log = function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return console.log.apply(console, args);
  };

  path = require('path');

  util = require('util');

  fs = require('fs-plus');

  gitParser = require('gitignore-parser');

  HelperProcess = (function() {
    function HelperProcess() {
      process.on('message', (function(_this) {
        return function(msg) {
          return _this[msg.cmd](msg);
        };
      })(this));
      process.on('disconnect', (function(_this) {
        return function() {
          return _this.destroy();
        };
      })(this));
    }

    HelperProcess.prototype.send = function(msg) {
      return process.send(msg);
    };

    HelperProcess.prototype.init = function(opts) {
      this.opts = opts;

      /*
        packed format (53 bits)
           5 suffix
          16 filePath
          32 char offset
       */
      log('@opts', this.opts);
      return this.checkAllProjects();
    };

    HelperProcess.prototype.updateOpts = function(opts) {
      this.opts = opts;
      return this.checkAllProjects();
    };

    HelperProcess.prototype.checkOneFile = function(filePath) {
      return log('checkOneFile', filePath);
    };

    HelperProcess.prototype.checkOneProject = function(projPath) {
      var e, giPath, gitignore, onDir, onFile;
      try {
        giPath = path.join(projPath, '.gitignore');
        gitignore = gitParser.compile(fs.readFileSync(giPath, 'utf8'));
      } catch (_error) {
        e = _error;
        return false;
      }
      onDir = (function(_this) {
        return function(dirPath) {
          var dir;
          dir = path.basename(dirPath);
          if (dir === '.git') {
            return false;
          }
          return !_this.opts.gitignore || gitignore.accepts(dir);
        };
      })(this);
      onFile = (function(_this) {
        return function(filePath) {
          var base, sfx;
          filePath = filePath.toLowerCase();
          base = path.basename(filePath);
          sfx = path.extname(filePath);
          if (((sfx === '' && _this.opts.suffixes.empty) || (sfx === '.' && _this.opts.suffixes.dot) || _this.opts.suffixes[sfx]) && (!_this.opts.gitignore || gitignore.accepts(base))) {
            return _this.checkOneFile(filePath);
          }
        };
      })(this);
      fs.traverseTreeSync(projPath, onFile, onDir);
      return true;
    };

    HelperProcess.prototype.checkAllProjects = function() {
      var i, len, optPath, projPath, ref, results;
      ref = this.opts.paths;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        optPath = ref[i];
        if (this.checkOneProject(optPath)) {
          continue;
        }
        results.push((function() {
          var j, len1, ref1, results1;
          ref1 = fs.listSync(optPath);
          results1 = [];
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            projPath = ref1[j];
            results1.push(this.checkOneProject(projPath));
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    HelperProcess.prototype.destroy = function() {};

    return HelperProcess;

  })();

  new HelperProcess;

}).call(this);
